[2023-07-05 20:25:41,385] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@1a3869f4, name=log4j:logger=kafka.controller (kafka.controller)
[2023-07-05 20:28:28,063] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-07-05 20:28:28,141] INFO [Controller id=1] 1 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2023-07-05 20:28:28,141] INFO [Controller id=1] Registering handlers (kafka.controller.KafkaController)
[2023-07-05 20:28:28,141] INFO [Controller id=1] Deleting log dir event notifications (kafka.controller.KafkaController)
[2023-07-05 20:28:28,173] INFO [Controller id=1] Deleting isr change notifications (kafka.controller.KafkaController)
[2023-07-05 20:28:28,173] INFO [Controller id=1] Initializing controller context (kafka.controller.KafkaController)
[2023-07-05 20:28:28,251] INFO [Controller id=1] Initialized broker epochs cache: Map(1 -> 24) (kafka.controller.KafkaController)
[2023-07-05 20:28:28,251] DEBUG [Controller id=1] Register BrokerModifications handler for Set(1) (kafka.controller.KafkaController)
[2023-07-05 20:28:28,267] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2023-07-05 20:28:28,298] INFO [Controller id=1] Currently active brokers in the cluster: Set(1) (kafka.controller.KafkaController)
[2023-07-05 20:28:28,298] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2023-07-05 20:28:28,298] INFO [Controller id=1] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2023-07-05 20:28:28,298] INFO [Controller id=1] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2023-07-05 20:28:28,314] INFO [Controller id=1] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2023-07-05 20:28:28,314] INFO [Controller id=1] List of topics to be deleted:  (kafka.controller.KafkaController)
[2023-07-05 20:28:28,314] INFO [Controller id=1] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2023-07-05 20:28:28,314] INFO [Controller id=1] Initializing topic deletion manager (kafka.controller.KafkaController)
[2023-07-05 20:28:28,314] INFO [Topic Deletion Manager 1] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2023-07-05 20:28:28,314] INFO [Controller id=1] Sending update metadata request (kafka.controller.KafkaController)
[2023-07-05 20:28:28,345] INFO [ReplicaStateMachine controllerId=1] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2023-07-05 20:28:28,345] INFO [ReplicaStateMachine controllerId=1] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-07-05 20:28:28,361] INFO [ReplicaStateMachine controllerId=1] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-07-05 20:28:28,376] DEBUG [ReplicaStateMachine controllerId=1] Started replica state machine with initial state -> HashMap() (kafka.controller.ZkReplicaStateMachine)
[2023-07-05 20:28:28,376] INFO [PartitionStateMachine controllerId=1] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2023-07-05 20:28:28,376] INFO [PartitionStateMachine controllerId=1] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2023-07-05 20:28:28,376] INFO [RequestSendThread controllerId=1] Controller 1 connected to localhost:9092 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-07-05 20:28:28,376] DEBUG [PartitionStateMachine controllerId=1] Started partition state machine with initial state -> HashMap() (kafka.controller.ZkPartitionStateMachine)
[2023-07-05 20:28:28,376] INFO [Controller id=1] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2023-07-05 20:28:28,408] INFO [Controller id=1] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2023-07-05 20:28:28,408] INFO [Controller id=1] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2023-07-05 20:28:28,408] INFO [Controller id=1] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2023-07-05 20:28:28,408] INFO [Controller id=1] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2023-07-05 20:28:28,408] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2023-07-05 20:28:28,454] INFO [Controller id=1] Starting the controller scheduler (kafka.controller.KafkaController)
[2023-07-05 20:28:33,472] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-07-05 20:28:33,472] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-07-05 20:31:40,307] INFO [Controller id=1] New topics: [Set(first_topic)], deleted topics: [Set()], new partition replica assignment [Map(first_topic-0 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2023-07-05 20:31:40,307] INFO [Controller id=1] New partition creation callback for first_topic-0 (kafka.controller.KafkaController)
[2023-07-05 20:33:33,490] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-07-05 20:33:33,490] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-07-05 20:33:33,490] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2023-07-05 20:33:33,490] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-07-05 20:35:45,094] INFO [Controller id=1] New topics: [Set(second_topic)], deleted topics: [Set()], new partition replica assignment [Map(second_topic-0 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2023-07-05 20:35:45,094] INFO [Controller id=1] New partition creation callback for second_topic-0 (kafka.controller.KafkaController)
[2023-07-05 20:36:41,698] DEBUG [Controller id=1] Delete topics listener fired for topics second_topic to be deleted (kafka.controller.KafkaController)
[2023-07-05 20:36:41,698] INFO [Controller id=1] Starting topic deletion for topics second_topic (kafka.controller.KafkaController)
[2023-07-05 20:36:41,698] INFO [Topic Deletion Manager 1] Handling deletion for topics second_topic (kafka.controller.TopicDeletionManager)
[2023-07-05 20:36:41,698] INFO [Topic Deletion Manager 1] Deletion of topic second_topic (re)started (kafka.controller.TopicDeletionManager)
[2023-07-05 20:36:41,729] DEBUG The stop replica request (delete = false) sent to broker 1 is StopReplicaRequestInfo([Topic=second_topic,Partition=0,Replica=1],false) (kafka.controller.ControllerBrokerRequestBatch)
[2023-07-05 20:36:41,729] DEBUG The stop replica request (delete = true) sent to broker 1 is StopReplicaRequestInfo([Topic=second_topic,Partition=0,Replica=1],true) (kafka.controller.ControllerBrokerRequestBatch)
[2023-07-05 20:36:41,791] DEBUG [Controller id=1] Delete topic callback invoked on StopReplica response received from broker 1: request error = NONE, partition errors = Map(second_topic-0 -> KAFKA_STORAGE_ERROR) (kafka.controller.KafkaController)
[2023-07-05 20:36:41,791] DEBUG [Topic Deletion Manager 1] Deletion failed for replicas [Topic=second_topic,Partition=0,Replica=1]. Halting deletion for topics Set(second_topic) (kafka.controller.TopicDeletionManager)
[2023-07-05 20:36:41,791] INFO [Topic Deletion Manager 1] Halted deletion of topics second_topic due to replica deletion failure (kafka.controller.TopicDeletionManager)
[2023-07-05 20:36:41,791] INFO [Topic Deletion Manager 1] Handling deletion for topics second_topic (kafka.controller.TopicDeletionManager)
[2023-07-05 20:36:41,791] DEBUG [Topic Deletion Manager 1] Retrying deletion of topics second_topic since replicas [Topic=second_topic,Partition=0,Replica=1] were not successfully deleted (kafka.controller.TopicDeletionManager)
[2023-07-05 20:38:02,066] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-07-05 20:38:02,108] INFO [Controller id=1] 1 successfully elected as the controller. Epoch incremented to 2 and epoch zk version is now 2 (kafka.controller.KafkaController)
[2023-07-05 20:38:02,109] INFO [Controller id=1] Registering handlers (kafka.controller.KafkaController)
[2023-07-05 20:38:02,115] INFO [Controller id=1] Deleting log dir event notifications (kafka.controller.KafkaController)
[2023-07-05 20:38:02,123] INFO [Controller id=1] Deleting isr change notifications (kafka.controller.KafkaController)
[2023-07-05 20:38:02,128] INFO [Controller id=1] Initializing controller context (kafka.controller.KafkaController)
[2023-07-05 20:38:02,146] INFO [Controller id=1] Initialized broker epochs cache: Map(1 -> 59) (kafka.controller.KafkaController)
[2023-07-05 20:38:02,164] DEBUG [Controller id=1] Register BrokerModifications handler for Set(1) (kafka.controller.KafkaController)
[2023-07-05 20:38:02,183] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2023-07-05 20:38:02,198] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2023-07-05 20:38:02,200] INFO [Controller id=1] Currently active brokers in the cluster: Set(1) (kafka.controller.KafkaController)
[2023-07-05 20:38:02,201] INFO [Controller id=1] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2023-07-05 20:38:02,202] INFO [Controller id=1] Current list of topics in the cluster: Set(second_topic, first_topic) (kafka.controller.KafkaController)
[2023-07-05 20:38:02,202] INFO [Controller id=1] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2023-07-05 20:38:02,211] INFO [Controller id=1] List of topics to be deleted: second_topic (kafka.controller.KafkaController)
[2023-07-05 20:38:02,212] INFO [Controller id=1] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2023-07-05 20:38:02,213] INFO [Controller id=1] Initializing topic deletion manager (kafka.controller.KafkaController)
[2023-07-05 20:38:02,213] INFO [Topic Deletion Manager 1] Initializing manager with initial deletions: Set(second_topic), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2023-07-05 20:38:02,214] INFO [Controller id=1] Sending update metadata request (kafka.controller.KafkaController)
[2023-07-05 20:38:02,230] INFO [ReplicaStateMachine controllerId=1] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2023-07-05 20:38:02,246] INFO [ReplicaStateMachine controllerId=1] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-07-05 20:38:02,252] INFO [RequestSendThread controllerId=1] Controller 1 connected to localhost:9092 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-07-05 20:38:02,285] INFO [ReplicaStateMachine controllerId=1] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-07-05 20:38:02,286] DEBUG [ReplicaStateMachine controllerId=1] Started replica state machine with initial state -> HashMap([Topic=second_topic,Partition=0,Replica=1] -> OnlineReplica, [Topic=first_topic,Partition=0,Replica=1] -> OnlineReplica) (kafka.controller.ZkReplicaStateMachine)
[2023-07-05 20:38:02,287] INFO [PartitionStateMachine controllerId=1] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2023-07-05 20:38:02,295] INFO [PartitionStateMachine controllerId=1] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2023-07-05 20:38:02,303] DEBUG [PartitionStateMachine controllerId=1] Started partition state machine with initial state -> HashMap(first_topic-0 -> OnlinePartition, second_topic-0 -> OfflinePartition) (kafka.controller.ZkPartitionStateMachine)
[2023-07-05 20:38:02,304] INFO [Controller id=1] Ready to serve as the new controller with epoch 2 (kafka.controller.KafkaController)
[2023-07-05 20:38:02,310] INFO [Topic Deletion Manager 1] Handling deletion for topics second_topic (kafka.controller.TopicDeletionManager)
[2023-07-05 20:38:02,315] INFO [Topic Deletion Manager 1] Deletion of topic second_topic (re)started (kafka.controller.TopicDeletionManager)
[2023-07-05 20:38:02,404] DEBUG The stop replica request (delete = false) sent to broker 1 is StopReplicaRequestInfo([Topic=second_topic,Partition=0,Replica=1],false) (kafka.controller.ControllerBrokerRequestBatch)
[2023-07-05 20:38:02,409] DEBUG The stop replica request (delete = true) sent to broker 1 is StopReplicaRequestInfo([Topic=second_topic,Partition=0,Replica=1],true) (kafka.controller.ControllerBrokerRequestBatch)
[2023-07-05 20:38:02,416] INFO [Controller id=1] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2023-07-05 20:38:02,417] INFO [Controller id=1] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2023-07-05 20:38:02,418] INFO [Controller id=1] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2023-07-05 20:38:02,419] INFO [Controller id=1] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2023-07-05 20:38:02,421] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2023-07-05 20:38:02,443] INFO [Controller id=1] Starting the controller scheduler (kafka.controller.KafkaController)
[2023-07-05 20:38:02,705] DEBUG [Controller id=1] Delete topic callback invoked on StopReplica response received from broker 1: request error = NONE, partition errors = Map(second_topic-0 -> KAFKA_STORAGE_ERROR) (kafka.controller.KafkaController)
[2023-07-05 20:38:02,710] DEBUG [Topic Deletion Manager 1] Deletion failed for replicas [Topic=second_topic,Partition=0,Replica=1]. Halting deletion for topics Set(second_topic) (kafka.controller.TopicDeletionManager)
[2023-07-05 20:38:02,712] INFO [Topic Deletion Manager 1] Halted deletion of topics second_topic due to replica deletion failure (kafka.controller.TopicDeletionManager)
[2023-07-05 20:38:02,713] INFO [Topic Deletion Manager 1] Handling deletion for topics second_topic (kafka.controller.TopicDeletionManager)
[2023-07-05 20:38:02,717] DEBUG [Topic Deletion Manager 1] Retrying deletion of topics second_topic since replicas [Topic=second_topic,Partition=0,Replica=1] were not successfully deleted (kafka.controller.TopicDeletionManager)
[2023-07-05 20:40:27,283] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@1a3869f4, name=log4j:logger=kafka.controller (kafka.controller)
[2023-07-05 20:41:04,856] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-07-05 20:41:04,903] INFO [Controller id=1] 1 successfully elected as the controller. Epoch incremented to 3 and epoch zk version is now 3 (kafka.controller.KafkaController)
[2023-07-05 20:41:04,903] INFO [Controller id=1] Registering handlers (kafka.controller.KafkaController)
[2023-07-05 20:41:04,903] INFO [Controller id=1] Deleting log dir event notifications (kafka.controller.KafkaController)
[2023-07-05 20:41:04,918] INFO [Controller id=1] Deleting isr change notifications (kafka.controller.KafkaController)
[2023-07-05 20:41:04,918] INFO [Controller id=1] Initializing controller context (kafka.controller.KafkaController)
[2023-07-05 20:41:04,934] INFO [Controller id=1] Initialized broker epochs cache: Map(1 -> 80) (kafka.controller.KafkaController)
[2023-07-05 20:41:04,950] DEBUG [Controller id=1] Register BrokerModifications handler for Set(1) (kafka.controller.KafkaController)
[2023-07-05 20:41:04,981] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2023-07-05 20:41:04,996] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2023-07-05 20:41:04,996] INFO [Controller id=1] Currently active brokers in the cluster: Set(1) (kafka.controller.KafkaController)
[2023-07-05 20:41:04,996] INFO [Controller id=1] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2023-07-05 20:41:04,996] INFO [Controller id=1] Current list of topics in the cluster: Set(second_topic, first_topic) (kafka.controller.KafkaController)
[2023-07-05 20:41:04,996] INFO [Controller id=1] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2023-07-05 20:41:05,012] INFO [Controller id=1] List of topics to be deleted: second_topic (kafka.controller.KafkaController)
[2023-07-05 20:41:05,012] INFO [Controller id=1] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2023-07-05 20:41:05,012] INFO [Controller id=1] Initializing topic deletion manager (kafka.controller.KafkaController)
[2023-07-05 20:41:05,012] INFO [Topic Deletion Manager 1] Initializing manager with initial deletions: Set(second_topic), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2023-07-05 20:41:05,012] INFO [Controller id=1] Sending update metadata request (kafka.controller.KafkaController)
[2023-07-05 20:41:05,028] INFO [ReplicaStateMachine controllerId=1] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2023-07-05 20:41:05,043] INFO [ReplicaStateMachine controllerId=1] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-07-05 20:41:05,043] INFO [RequestSendThread controllerId=1] Controller 1 connected to localhost:9092 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-07-05 20:41:05,090] INFO [ReplicaStateMachine controllerId=1] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-07-05 20:41:05,090] DEBUG [ReplicaStateMachine controllerId=1] Started replica state machine with initial state -> HashMap([Topic=second_topic,Partition=0,Replica=1] -> OnlineReplica, [Topic=first_topic,Partition=0,Replica=1] -> OnlineReplica) (kafka.controller.ZkReplicaStateMachine)
[2023-07-05 20:41:05,090] INFO [PartitionStateMachine controllerId=1] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2023-07-05 20:41:05,090] INFO [PartitionStateMachine controllerId=1] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2023-07-05 20:41:05,106] DEBUG [PartitionStateMachine controllerId=1] Started partition state machine with initial state -> HashMap(first_topic-0 -> OnlinePartition, second_topic-0 -> OfflinePartition) (kafka.controller.ZkPartitionStateMachine)
[2023-07-05 20:41:05,106] INFO [Controller id=1] Ready to serve as the new controller with epoch 3 (kafka.controller.KafkaController)
[2023-07-05 20:41:05,106] INFO [Topic Deletion Manager 1] Handling deletion for topics second_topic (kafka.controller.TopicDeletionManager)
[2023-07-05 20:41:05,106] INFO [Topic Deletion Manager 1] Deletion of topic second_topic (re)started (kafka.controller.TopicDeletionManager)
[2023-07-05 20:41:05,168] DEBUG The stop replica request (delete = false) sent to broker 1 is StopReplicaRequestInfo([Topic=second_topic,Partition=0,Replica=1],false) (kafka.controller.ControllerBrokerRequestBatch)
[2023-07-05 20:41:05,184] DEBUG The stop replica request (delete = true) sent to broker 1 is StopReplicaRequestInfo([Topic=second_topic,Partition=0,Replica=1],true) (kafka.controller.ControllerBrokerRequestBatch)
[2023-07-05 20:41:05,184] INFO [Controller id=1] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2023-07-05 20:41:05,184] INFO [Controller id=1] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2023-07-05 20:41:05,184] INFO [Controller id=1] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2023-07-05 20:41:05,184] INFO [Controller id=1] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2023-07-05 20:41:05,184] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2023-07-05 20:41:05,215] INFO [Controller id=1] Starting the controller scheduler (kafka.controller.KafkaController)
[2023-07-05 20:41:05,481] DEBUG [Controller id=1] Delete topic callback invoked on StopReplica response received from broker 1: request error = NONE, partition errors = Map(second_topic-0 -> KAFKA_STORAGE_ERROR) (kafka.controller.KafkaController)
[2023-07-05 20:41:05,496] DEBUG [Topic Deletion Manager 1] Deletion failed for replicas [Topic=second_topic,Partition=0,Replica=1]. Halting deletion for topics Set(second_topic) (kafka.controller.TopicDeletionManager)
[2023-07-05 20:41:05,496] INFO [Topic Deletion Manager 1] Halted deletion of topics second_topic due to replica deletion failure (kafka.controller.TopicDeletionManager)
[2023-07-05 20:41:05,496] INFO [Topic Deletion Manager 1] Handling deletion for topics second_topic (kafka.controller.TopicDeletionManager)
[2023-07-05 20:41:05,496] DEBUG [Topic Deletion Manager 1] Retrying deletion of topics second_topic since replicas [Topic=second_topic,Partition=0,Replica=1] were not successfully deleted (kafka.controller.TopicDeletionManager)
[2023-07-05 20:42:27,390] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@1a3869f4, name=log4j:logger=kafka.controller (kafka.controller)
[2023-07-05 20:43:03,542] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-07-05 20:43:03,589] INFO [Controller id=1] 1 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2023-07-05 20:43:03,589] INFO [Controller id=1] Registering handlers (kafka.controller.KafkaController)
[2023-07-05 20:43:03,621] INFO [Controller id=1] Deleting log dir event notifications (kafka.controller.KafkaController)
[2023-07-05 20:43:03,621] INFO [Controller id=1] Deleting isr change notifications (kafka.controller.KafkaController)
[2023-07-05 20:43:03,636] INFO [Controller id=1] Initializing controller context (kafka.controller.KafkaController)
[2023-07-05 20:43:03,699] INFO [Controller id=1] Initialized broker epochs cache: Map(1 -> 24) (kafka.controller.KafkaController)
[2023-07-05 20:43:03,714] DEBUG [Controller id=1] Register BrokerModifications handler for Set(1) (kafka.controller.KafkaController)
[2023-07-05 20:43:03,730] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2023-07-05 20:43:03,746] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2023-07-05 20:43:03,746] INFO [Controller id=1] Currently active brokers in the cluster: Set(1) (kafka.controller.KafkaController)
[2023-07-05 20:43:03,746] INFO [Controller id=1] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2023-07-05 20:43:03,746] INFO [Controller id=1] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2023-07-05 20:43:03,746] INFO [Controller id=1] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2023-07-05 20:43:03,761] INFO [Controller id=1] List of topics to be deleted:  (kafka.controller.KafkaController)
[2023-07-05 20:43:03,761] INFO [Controller id=1] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2023-07-05 20:43:03,761] INFO [Controller id=1] Initializing topic deletion manager (kafka.controller.KafkaController)
[2023-07-05 20:43:03,761] INFO [Topic Deletion Manager 1] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2023-07-05 20:43:03,761] INFO [Controller id=1] Sending update metadata request (kafka.controller.KafkaController)
[2023-07-05 20:43:03,777] INFO [ReplicaStateMachine controllerId=1] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2023-07-05 20:43:03,777] INFO [ReplicaStateMachine controllerId=1] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-07-05 20:43:03,792] INFO [ReplicaStateMachine controllerId=1] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-07-05 20:43:03,792] DEBUG [ReplicaStateMachine controllerId=1] Started replica state machine with initial state -> HashMap() (kafka.controller.ZkReplicaStateMachine)
[2023-07-05 20:43:03,792] INFO [PartitionStateMachine controllerId=1] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2023-07-05 20:43:03,792] INFO [PartitionStateMachine controllerId=1] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2023-07-05 20:43:03,792] INFO [RequestSendThread controllerId=1] Controller 1 connected to localhost:9092 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-07-05 20:43:03,792] DEBUG [PartitionStateMachine controllerId=1] Started partition state machine with initial state -> HashMap() (kafka.controller.ZkPartitionStateMachine)
[2023-07-05 20:43:03,792] INFO [Controller id=1] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2023-07-05 20:43:03,808] INFO [Controller id=1] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2023-07-05 20:43:03,808] INFO [Controller id=1] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2023-07-05 20:43:03,808] INFO [Controller id=1] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2023-07-05 20:43:03,808] INFO [Controller id=1] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2023-07-05 20:43:03,808] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2023-07-05 20:43:03,839] INFO [Controller id=1] Starting the controller scheduler (kafka.controller.KafkaController)
[2023-07-05 20:43:08,855] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-07-05 20:43:08,855] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-07-05 20:43:54,228] INFO [Controller id=1] New topics: [Set(first_topic)], deleted topics: [Set()], new partition replica assignment [Map(first_topic-0 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2023-07-05 20:43:54,229] INFO [Controller id=1] New partition creation callback for first_topic-0 (kafka.controller.KafkaController)
[2023-07-05 20:46:32,069] INFO [Controller id=1] New topics: [Set(second_topic)], deleted topics: [Set()], new partition replica assignment [Map(second_topic-0 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), second_topic-1 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), second_topic-2 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2023-07-05 20:46:32,070] INFO [Controller id=1] New partition creation callback for second_topic-0,second_topic-1,second_topic-2 (kafka.controller.KafkaController)
[2023-07-05 20:48:08,866] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-07-05 20:48:08,868] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-07-05 20:48:08,871] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2023-07-05 20:48:08,872] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-07-05 20:52:23,957] INFO [Controller id=1] New topics: [Set(__consumer_offsets)], deleted topics: [Set()], new partition replica assignment [HashMap(__consumer_offsets-22 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2023-07-05 20:52:23,959] INFO [Controller id=1] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-37,__consumer_offsets-38,__consumer_offsets-13,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
[2023-07-05 20:53:08,874] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-07-05 20:53:08,874] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-07-05 20:53:08,878] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-07-05 20:53:08,879] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-07-05 20:58:08,889] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-07-05 20:58:08,889] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-07-05 20:58:08,893] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-07-05 20:58:08,893] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-07-05 21:00:45,260] INFO [Controller id=1] Shutting down broker 1 (kafka.controller.KafkaController)
[2023-07-05 21:00:45,264] DEBUG [Controller id=1] All shutting down brokers: 1 (kafka.controller.KafkaController)
[2023-07-05 21:00:45,265] DEBUG [Controller id=1] Live brokers:  (kafka.controller.KafkaController)
[2023-07-05 21:00:45,276] TRACE [Controller id=1] All leaders = __consumer_offsets-13 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-46 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-9 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-42 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-21 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-17 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-30 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-26 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-5 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-38 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),second_topic-0 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-1 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-34 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-16 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-45 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-12 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-41 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-24 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-20 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-49 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-0 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-29 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-25 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-8 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-37 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-4 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-33 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-15 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-48 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-11 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),first_topic-0 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-44 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-23 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-19 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-32 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-28 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-7 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-40 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-3 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-36 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),second_topic-2 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-47 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-14 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-43 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-10 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-22 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-18 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-31 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-27 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-39 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),second_topic-1 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-6 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-35 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-2 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:1) (kafka.controller.KafkaController)
[2023-07-05 21:00:46,805] INFO [ControllerEventThread controllerId=1] Shutting down (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-07-05 21:00:46,807] INFO [ControllerEventThread controllerId=1] Shutdown completed (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-07-05 21:00:46,807] INFO [ControllerEventThread controllerId=1] Stopped (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-07-05 21:00:46,809] DEBUG [Controller id=1] Resigning (kafka.controller.KafkaController)
[2023-07-05 21:00:46,809] DEBUG [Controller id=1] Unregister BrokerModifications handler for Set(1) (kafka.controller.KafkaController)
[2023-07-05 21:00:46,812] INFO [PartitionStateMachine controllerId=1] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-07-05 21:00:46,813] INFO [ReplicaStateMachine controllerId=1] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-07-05 21:00:46,813] INFO [RequestSendThread controllerId=1] Shutting down (kafka.controller.RequestSendThread)
[2023-07-05 21:00:46,813] INFO [RequestSendThread controllerId=1] Shutdown completed (kafka.controller.RequestSendThread)
[2023-07-05 21:00:46,813] INFO [RequestSendThread controllerId=1] Stopped (kafka.controller.RequestSendThread)
[2023-07-05 21:00:46,817] INFO [Controller id=1] Resigned (kafka.controller.KafkaController)
